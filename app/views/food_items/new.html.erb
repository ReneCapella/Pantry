<h1>Add Food Items</h1>

<%= render "form", food_item: @food_item %>

<br>

<div>
  <video id="video" autoplay></video>
  <button id="getUserMediaButton">Scan a Recipt</button>
</div>
<button id="qr-button">Detect barcode</button>
<div id="message"></div>


<div>
  <%= link_to "Back to food items", food_items_path %>
</div>
<script type="text/javascript">
    // check compatibility
    if (!('BarcodeDetector' in window)) {
      console.log('Barcode Detector is not supported by this browser.');
    } else {
      console.log('Barcode Detector supported!');
    }

    var imageCapture;

    function onGetUserMediaButtonClick() {
      console.log('!!!!');
      navigator.mediaDevices.getUserMedia({video: true})
      .then(mediaStream => {
        document.querySelector('video').srcObject = mediaStream;

        const track = mediaStream.getVideoTracks()[0];
        imageCapture = new ImageCapture(track);
      })
      .catch(error => ChromeSamples.log(error));
    }

    function onGrabFrameButtonClick() {
      imageCapture.grabFrame()
      .then(imageBitmap => {
        const canvas = document.querySelector('#grabFrameCanvas');
        drawCanvas(canvas, imageBitmap);
      })
      .catch(error => ChromeSamples.log(error));
    }

    function onTakePhotoButtonClick() {
      imageCapture.takePhoto()
      .then(blob => createImageBitmap(blob))
      .then(imageBitmap => {
        const canvas = document.querySelector('#takePhotoCanvas');
        drawCanvas(canvas, imageBitmap);
      })
      .catch(error => ChromeSamples.log(error));
    }

    /* Utils */

    function drawCanvas(canvas, img) {
      canvas.width = getComputedStyle(canvas).width.split('px')[0];
      canvas.height = getComputedStyle(canvas).height.split('px')[0];
      let ratio  = Math.min(canvas.width / img.width, canvas.height / img.height);
      let x = (canvas.width - img.width * ratio) / 2;
      let y = (canvas.height - img.height * ratio) / 2;
      canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
      canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height,
          x, y, img.width * ratio, img.height * ratio);
    }

    document.querySelector('video').addEventListener('play', function() {
      document.querySelector('#qr-button').disabled = false;
    });

    document.getElementById('getUserMediaButton').addEventListener('click', function() {
      console.log('!!!!');
      navigator.mediaDevices.getUserMedia({video: true})
      .then(mediaStream => {
        document.querySelector('video').srcObject = mediaStream;

        const track = mediaStream.getVideoTracks()[0];
        imageCapture = new ImageCapture(track);
      })
      .catch(error => ChromeSamples.log(error));
    });



    const barcode = document.getElementById('video');
    const button = document.getElementById('qr-button');
    const message = document.getElementById('message');
    const detectBarcode = () => {


      const barcodeDetector = new BarcodeDetector({
        formats: [
        "aztec",
        "code_128",
        "code_39",
        "code_93",
        "codabar",
        "data_matrix",
        "ean_13",
        "ean_8",
        "itf",
        "pdf417",
        "qr_code",
        "unknown",
        "upc_a",
        "upc_e"
        ],
      });
      barcodeDetector
      .detect(barcode)
      .then((data) => {
        console.log(data);
        const { rawValue } = data[0];
        message.innerText = `Barcode value: ${rawValue}`;
      })
      .catch((e) => {
        console.error(`Barcode Detection failed: ${e}`);
      });
    };

    button.addEventListener('click', detectBarcode);
  </script>
